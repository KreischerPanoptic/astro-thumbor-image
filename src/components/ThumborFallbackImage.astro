---
import {buildUrl, srcSetToString} from "../types";
import FallbackImageProps from "../types/fallbackImageProps";
export interface Props extends FallbackImageProps {}

Astro.props.surpressWarnings = true;

let relative = false;

//GET ABSOLUTE URL
//new URL("/assets/images/logo/logo.png", document.baseURI).href
function validateProps(props: FallbackImageProps) {
    if(!props.alt) {
        throw new Error("You must provide alt prop to <ThumborImage />");
    }
    if(!props.src) {
        throw new Error("You must provide src prop to <ThumborImage />");
    }
    relative = !(props.src.indexOf('http://') === 0 || props.src.indexOf('https://') === 0);
}

validateProps(Astro.props);
const fallbackimage = Astro.props.fallback.thumbor ? buildUrl(Astro.props.fallback.src, Astro.props.fallback.thumbor) : Astro.props.fallback.src;
const fallbackid = Astro.props.id ? Astro.props.id : '';
---
<img
        id={Astro.props.id ? Astro.props.id : ''}
        src={Astro.props.thumbor ? buildUrl(Astro.props.src, Astro.props.thumbor) : Astro.props.src}
        alt={Astro.props.alt ? Astro.props.alt : ''}
        width={Astro.props.width ? Astro.props.width : ''}
        height={Astro.props.height ? Astro.props.height : ''}
        loading={Astro.props.loading ? Astro.props.loading : 'lazy'}
        decoding={Astro.props.decoding ? Astro.props.decoding : 'async'}
        srcset={Astro.props.srcset ? srcSetToString(Astro.props.srcset) : ''}
        class={Astro.props.class ? Astro.props.class : ''}
/>
<script type="text/javascript" define:vars={{ fallbackimage, fallbackid }} is:inline>
    let fallbackimageLocal = fallbackimage;
    const images = document.querySelectorAll(`img#${fallbackid}`);
    //console.log(images);
    // Handle clicks on each button.
    images.forEach((image) => {
        image.addEventListener('error', () => {
            image.onerror = null;
            image.src = fallbackimageLocal;
        });
    });
</script>
